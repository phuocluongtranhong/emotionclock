<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserGroupRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserGroupRepository extends AppRepository
{

    /****************************************************************************************/
    #This is 3 functions that have relation together, If you modify how is a group user of a group, pls modify all of 3 ones.

    /**
     * @param Group|groupId $group
     * @return arrayUser
     * @author binh.vt
     */
    public function getUsersOfGroup($group) {

        $query = $this->getEntityManager()
            ->createQueryBuilder('m')
            ->select('u')
            ->from('AppBundle:User', 'u')
            ->join('AppBundle:UserGroup', 'ug')
            ->where('u = ug.user AND ug.group = :groupParameter AND ug.deleteBy IS NULL')
            ->setParameter('groupParameter', $group)
            ->andWhere('ug.isAccept = 1');
        return $query->getQuery()->getResult();
    }

    /**
     * @param User|userId $user
     * @return arrGroup
     * @author binh.vt
     */
    public function getGroupsByUser($user) {
        $query = $this->getEntityManager()
                    ->createQueryBuilder('m')
                    ->select('g')
            ->from('AppBundle:Group', 'g')
                    ->join('AppBundle:UserGroup', 'ug')
                    ->where('g = ug.group AND ug.user = :userParameter AND ug.deleteBy IS NULL')
                    ->setParameter('userParameter', $user)
                    ->andWhere('ug.isAccept = 1');
        return $query->getQuery()->getResult();
    }

    /**
     * @param User|userId $user
     * @return arrUserGroup
     * @author binh.vt
     */
    public function getUserGroupsByUser($user) {
        $query = $this->getEntityManager()
            ->createQueryBuilder('m')
            ->select('ug')
            ->from('AppBundle:Group', 'g')
            ->join('AppBundle:UserGroup', 'ug')
            ->where('g = ug.group AND ug.user = :userParameter AND ug.deleteBy IS NULL')
            ->setParameter('userParameter', $user)
            ->andWhere('ug.isAccept = 1');
        return $query->getQuery()->getResult();
    }

    /**
     * @param Group|groupId $group
     * @param User|userId $user
     * @return UserGroup|null
     * @author binh.vt
     */
    public function isGroupMember($group, $user) {
        $userGroup = $this->findOneBy(array(
            'group' => $group,
            'user' => $user,
            'isAccept' => 1
        ));
        return $userGroup;
    }

    /**
     * @param Group|groupId $group
     * @return UserGroup|null
     * @author Phuoc
     */
    public function findAdmin($group) {
        $userGroup = $this->findOneBy(array(
            'group' => $group,
            'role' => 1,
        ));
        return $userGroup;
    }

    /****************************************************************************************/

    /**
     * @param User|userId $user
     * @return arrUserGroup|null
     * @return UserGroup|null
     * @author Phuoc
     */
    public function getInvitations($user) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder('ug')
                    ->select('ug')
                    ->from('AppBundle:UserGroup', 'ug')
                    ->where('(ug.isAccept IS NULL OR ug.isAccept = 0) AND (ug.status = 0 OR ug.status IS NULL)')
                    ->andWhere('ug.createdBy <> :user')
                    ->andWhere('ug.user = :user OR ug.email = :email')
                    ->setParameter('user', $user)
                    ->setParameter('email', $user->getEmail())
                    ->orderBy('ug.id', 'DESC');
        return $query->getQuery()->getResult();
    }

    /****************************************************************************************/

    /**
     * @param User|userId $user
     * @return arrUserGroup|null
     * @return UserGroup|null
     * @author Phuoc
     */
    public function getSendInvitations($user) {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder('ug')
            ->select('ug')
            ->from('AppBundle:UserGroup', 'ug')
            ->where('ug.isAccept IS NULL OR ug.isAccept = 0 OR (ug.status = 1 AND ug.isAccept = 1)')
            ->andWhere('ug.user IS NULL OR ug.user <> :user')
            ->andWhere('ug.createdBy = :user')
            ->setParameter('user', $user)
            ->orderBy('ug.id', 'DESC');
        return $query->getQuery()->getResult();
    }

    /**
     * @param Group|groupId $group
     * @param User|userId $user
     * @return int affected rows
     * @author binh.vt
     */
    public function setMainGroup($group, $user) {
        $normal = null;
        $main = 1;
        //Update old main group to normal group.
        $em = $this->getEntityManager();
        $count = $em->createQueryBuilder('q1')
                    ->update('AppBundle:UserGroup', 'ug')
                    ->set('ug.isMain', ':normal')->setParameter('normal', $normal)
                    ->set('ug.defaultReceiver', ':receiver')->setParameter('receiver', NULL)
                    ->andwhere('ug.user = :user')->setParameter('user', $user)
                    ->andWhere('ug.isMain = :main')->setParameter('main', $main)
                    ->getQuery()->execute();
        //Update new main group.
        $count = $em->createQueryBuilder('q2')
                    ->update('AppBundle:UserGroup', 'ug')
                    ->set('ug.isMain', ':main')->setParameter('main', $main)
                    ->set('ug.defaultReceiver', ':receiver')->setParameter('receiver', NULL)
                    ->andwhere('ug.user = :user')->setParameter('user', $user)
                    ->andWhere('ug.group = :group')->setParameter('group', $group)
                    ->getQuery()->execute();
        return $count;
    }


    /**
     * @param User|userId $user
     * @author Phuoc
     */
    public function getMainGroupByUser($user)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder('m')
            ->select('ug')
            ->from('AppBundle:Group', 'g')
            ->join('AppBundle:UserGroup', 'ug')
            ->where('g = ug.group AND ug.user = :userParameter AND ug.deleteBy IS NULL')
            ->setParameter('userParameter', $user)
            ->andWhere('ug.isMain = 1')
            ->andWhere('ug.isAccept = 1');
        return $query->getQuery()->getResult();
    }

    /**
     * @param User|userId $user
     * @author Phuoc
     */
        public function getOtherNotifications($user)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder('m')
            ->select('ug')
            ->from('AppBundle:UserGroup', 'ug')
            ->where('ug.user = :userParameter')
            ->andWhere('(ug.isAccept = 1 AND ug.deleteBy IS NOT NULL) OR (ug.makeAdminBy IS NOT NULL AND ug.role = 1)')
            ->orWhere('ug.adminOfGroup = :userParameter')
            ->setParameter('userParameter', $user);
        return $query->getQuery()->getResult();
    }
}
